"""Tokenizer and tree-structure for style-applying in text.

Allows one to encode in a single string style changes
instead of having to chunk pieces of text
to change the context for color, effects and transform changes


Also, [future] enable the parsing of more than one
markup style - for example, allowing terminedia
to extract color and movement information from
ANSI text streams generated by other apps.


TMMarkup example:


here comes some text [color:blue] with apples [background:red] infinite [/color /background effect:blink]in joy and blink[/effect]
[direction:up]happy[effect:bold]new year[/effect][direction:left]there we go[/direction]up again[direction: right] the end.


"""




class Mark:
    pass

class StyleMark(Mark):
    pass

class Portal(Mark):
    pass


class StyledStream:
    def __init__(self, tokenstream):
        self.data = tokenstream

    def __iter__(self):
        for item in self.data:
            yield item

    def __len__(self):
        return len(self.data)




def split_graphemes(text):
    """Separates a string in a list of strings, each containing a single grapheme:
    the contiguous set of a character and combining characters to be applied to it.
    """

    category = unicodedata.category

    result = []
    for char in text:
        if not category(char)[0] == 'M' or not result:
            result.append(char)
        else:
            result[-1] += char
    return result



class Tokenizer:
    pass

class MLTokenizer(Tokenizer):
    pass

class ANSITokenizer(Tokenizer):
    pass
